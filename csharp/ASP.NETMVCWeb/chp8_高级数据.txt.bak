ASP.NET MVC 的核心组件：Controller,View,Model.

数据访问层的相关技术。如何使用ORM 数据访问模式，来构建ASP.NET MVC Web应用程序

1.数据访问模式
	ASP.NET MVC 框架 的一个最大特点，就是扩展性。
	允许开发者灵活插入其他组件和框架。
	ASP.NET MVC 构建在 .NET 4.5 以上。
	流行的数据访问框架：ADO.NET ,LINQ TO SQL ,ADO.NET EntityFramework 或者Nhibernet ，都可以使用ASP.NET MVC 数据访问层。

	# Plain Old CLR Objects 
	POCO : 代表业务实体类的.net 类。专注于 业务属性和业务行为。不需要任何数据库结构代码。

	# 使用repository模式
	repository 模式，是一种数据访问模式。可以带来更多访问组件松耦合。
	单独的一个或多个类，repository 会负责持久化应用业务模型，而不是直接在控制器或者业务模型里，包含数据访问逻辑。

	repository 模式很好的实现了mvc模式的设计原则-关注分离点。通过这种模式，可以把数据访问层，与其余的代码隔离。以便利用POCO的好处。

	有几种不同的方式来设计repository.

	#每种业务模式和repository一对一
	创建repository最简单的方法，就是给每个业务模式类都创建一个repository .但是有重复的代码和复杂性的问题。特别是每个repository都需要与其他repository交互。

	#使用聚合根 
	聚合根 是一个可以独立存在的类，负责不同类之间的映射。

	#泛型repository 一对多。
	使用.net 泛型机制，创建一个通用的repository .

	除了CRUD外，repository 有时候需要缓存实体对象。缓存处理的对象，大部分都是静态对象。
	比如，从下拉框中查询值 。
	
	ASP.NET MVC Controller 和 repository 交互 加载，和持久化业务模型数据。通过DI依赖注入，repository可以注入到控制器的构造函数里。
	repository 和 EntityFramework上下文的关系。ASP.NET MVC Controller 与repository交互，而不是直接与EntityFramework交互。

	#对象关系映射。
	对象关系映射 是一种在支持类型和关系数据库模型之间进行实体映射的数据库访问模式。

	目的：实现在业务模式和数据模型之间 解耦。成为对象阻抗失配 。
	对象关系阻抗失配的主要问题：
		#粒度	 例如，地址
		#继承
		#标识
		#关联 关联型数据库使用，主键和外键建立实体关系。.net 框架，使用单向引用表示对象关联。 一对多，多对多的问题。
		#数据导航。
2.实体框架概述
	Linq to Sql ,ADO.NET Entity Framework ,NHibernet
	ADO.NET EntityFramework ,EF ,是一个对象关系映射器。
	存储过程
	#选择数据访问方法
	以数据为中心---》优先设计数据库---》生成业务模型，由数据库驱动模型。
	EntityFramework允许开发人员选择以下三种不同的方式
	数据库优先方式
		EntityFramework可以根据关系型数据库的表，生成业务模型。
	模型优先方式
		EntityFramwork提供的设计器可以创建数据模型。
	代码优先方式

3.数据库并发
	数据库并发
	并发冲突：最后进入规则：A,B同时修改相同信息。最后提交的修改起作用。
	并发处理：保守式并发方法，开放式并发方法
		保守式并发：修改时，加上只读锁，直到用户更新完数据，移除只读锁。有问题，因为Web网站依赖无状态模型，主要的问题是，何时移除只读锁
		 无法保证用户执行别的操作，以及是否触发移除数据库记录的只读锁 。
		开放式并发方法。开放式并发方法，会查询最新查询的数据，是否被修改。
			在表的末端加上一个最后更新的时间戳，在更新之前都来检查当前的数据库记录，是否被更新。

	ADO.NET EntityFramwork 不直接支持开放式并发，但是推荐使用开放式并发。
	EntityFramework提供了开放式并发的两种方式：给尸体对象增加时间戳。以及处理EntityFramework数据上下文返回的OptimsticsConcurrencyException异常
	[Timestamp]
	public byte[] Timestamp{get;set;}

	给实体对象，添加时间戳，任何update,delete 语句，都会在sqlwhere中添加新的时间戳。

4.构建数据访问层
	使用EntityFramework代码优先方法
	代码优先方法背后的驱动力是可以使用POCO类。
	代码优先方法是使用惯例来映射POCO类。而不是使用实体基类。
	表名，使用类名进行命名。列名属于属性名称。

	代码优先数据标记。
	POCO 类，继承自实体基类，  实体基类，继承了两个接口，自定义IEntity ,.net的 IEquatable接口 。
	IEntity 接口 ，为实体定义了以URL 为键的命名原则。
	IEquatable ，定义了不同实体对象的比较丰富的基类。
	public interface IEntity{
		//实体唯一的公开表示符
		string key{get;}
	}
	public abstract class Entity<TId>:IEntity,IEquatable<Entity<TId>> where TId:struct{
		private object _id;
		[Key]
		public virtual TId Id{
			get{
				if(_id==null&&typeof(TId)==Guid){
					_id=Guid.NewGuid();
				}
				return _id==null?default(TId):(TId)_id;
			}
			protected set{_id=value;}
		}
		
		private string _key;

		[Unique,StringLength(50)]
		public virtual string Key{
			get{return _key??GenerateKey();}
			set{_key=value;}
		}

		protected virtual string GneratorKey(){
			return KeyGenerator.Generate();
		}
	}




	
	[Timestamp]
	public byte[] Timestamp{get;set;}

	#
	public class Payment:Entity<Guid>{
		public Currency Amount{get;private set;}
		public Auction Auction{get;private set;}
		public DateTime Timestamp{get;private set;}
		public User user{get;set;}

		public Payment(User user,Auction auction,Currency amount){
			User=user;
			Auction=auction;
			Amount=amount;
			Timestamp=Clock.Now;
		}
		public Payment(){
			
		}
	}
	使用域模型的关键，就是把模型分割成一个或者多个上下文。 每个域模型定义成聚合群集，aggergate cluster
	而每个聚合群集由多个作为单一逻辑单元协同工作的对象组成

	Auction类的内部工作机制，以及相关的实体和行为。ICollection<T> 用来定义不同的相关类。
	包括Bid,Category,Image.
	
	public class Auction:Entity<TId>{
		public virtual string Title{get;set;}
		public virtual string Description{get;set;}
		public virtual DateTime StartTime{get;set;}
		public virtual DateTime EndTime{get;set;}
		public virtual Currency CurrencyPrice{get;set;}
	}

	#
	public partial class DataContext:DbContext{
		public DbSet<Category> Categories{get;set;}
		public DbSet<Auction> Auctions{get;set;}

		public IList<Auctions> GetAuctionsByCategory(Category category){
			IList<Auctions> result=null;
			var db=new DataContext();
			result=db.Auctions.Where(q=>q.Categories.Equals(category)).ToList();
			return result;
		}
	}

	#
	public class Repository:IRepository{
		private readonly DbContext _context;
		private readonly bool _isSharedContext;
		public Repository(DbContext context,bool isSharedContext){
			_context=context;
			_isSharedContext=isSharedContext;
		}
	}

	# 排序，过滤，分页
	自动封装查询页面表单域到SearchCriteria 类。
	用户输入关键字，或者修改查询条件后，就会调用SearchController控制器 。
	Index操作方法，负责处理进入的请求消息。检查传入的模型，是否包含查询条件。
	Repositor类的Query方法，发送过滤数据给EntityFramework数据上下文。
	当用户修改了排序字段，SortByFieldList,会激活SearchController控制器。
	控制器会检查SearchCriteria类，以确定排序字段，为实现数据排序，可以使用
	q=>q.CurrentPrice.Value 来使用Linq排序。
	var viewModel=new SearchViewModel();
	Mapper.DynamicMap(criteria,viewModel);
	viewModel.SearchResult=Mapper.DynamicMap<IEnumerable<AuctionViewModel>>(auctionData);
	return View("Search",viewModel);
	当用户点击，下一页，或者下一页，或不同PagingSizeList时 ，会调用SearchController.
	控制器检查criteria来显示那一页的数据，PageSearchResult（）方法随后，调用自定义扩展方法，page()来确定要显示的
	交易数据auctions;

	#####
	IQueryable 和 IList 区别
	IList会立即在内存里创建持久数据，没有实现延期执行，如果被加载的实体，有关联实体，associations.此关联实体 ，就不会被加载(即不立即加载，也不延迟加载)
	IQueryable 不会立即在内存中创建持久数据，只有遍历它，把它转换成list的情况下，才会向内存加载数据，它可以延期执行，如果被加载的实体，含有关联实体，associate,关联实体可被接下来的访问加载。
	#####
	为了便于实现翻页，实现了IEnumerable<T>的扩展方法，可以使用Linq的skip 和 Take命令，根据当前页面和pageSize来返回特定页面的数据。
	要实现this();要有无参的构造函数
	public class CurrencyCode{
		private readonly string _value;
		public Currency(string value):this(){
			_value=value;
		}
		public Currency(){
		
		}

	}
	#
	implicit 用于声明隐式的用户定义类型转换运算符。
	var symbol=CurrencyCodesBySymbol.Single(x=>x.Value=Code).Key;
	return string.Format("{0}{1:N2}",symbol,Value);
	#定义类的操作
	public static Currency operator +(Currency x ,double amount){
		return new Currency(x.Code,x.Value+amount);
	}
	public static Currency operator -(Currency x,double amount){
		return new Currency(x.Code,x.Value-amount);
	}
	public static bool operator ==(Currency left,Currency right){
		return Equals(left,right);
	}
	public static bool operator !=(Currency left,Currency right){
		return !Equals(left,right);
	}
	# 用户声明 隐式的类型转换
	public static implicit operator string(Currency currecy){
		return currecy.ToString();
	}
	public static implicit operator Currency(string currency){
		return new Currency(currency);
	}

	public override string ToString(){
		var symbol=CurrencyCodesBySymbol.Single(x=>x.Value==Code).Key;
		return string.Format("{0}{1:N2}",symbol,Value);
	}
	public Currency(string currency){
		Contract.Requires(!string.IsNullOrWhiteSpace(currency));
		Contract.Requires(currency.Length>1);
		Code=CurrencyCodesBySymbol(currency[0]);
		Value=double.Parse(currency.Substring(1));
	}

	本章首先介绍了数据访问模式，以及如何使用Entity Framework.
	接着详细介绍了EntityFramework 提供的几种不同的数据访问方法，并讲解了Code First构造数据访问层，
	最后介绍了POCO 类，以及repository模式构建ASP.NET MVC Web应用程序。




