11.1 Linq介绍
11.2 简单的开始：选择元素
11.3 对序列进行过滤和排序
11.4 let子句和透明表示符
11.5 连接
11.6 分组和延续
11.7 在查询表达式和点标记之间做出选择

11.1 Linq介绍
	Linq不能把非常复杂的查询转为一行代码
	本次将分析Linq的两个不同的方面
		第一：架构支持
		第二：查询表达式的编译器转换
	查询表达式：首先由编译器  预处理 为 普通的 c#3 代码。
		    然后以完全普通的方式进行编译
	
	# Linq中的基础概念
	c#3 编译器如何处理查询表达式
	降低两种数据模型之间的组抗失配的过程中，遇到的一个问题是：创建另一个模型为桥梁
	
	序列 sequence  -linq模型
        通过IEnumreable和IEnumerable<T> 进行封装。 序列就像数据的传送带，每次只能获取他们一个
	直到你不想获取数据或者序列中没有数据。
	序列与其他集合的数据结构的最大区别是：
		当你从序列中读取数据的时候，通常不知道还有多少数据等待项。也不能访问任意数据项。
	而且，有些序列，永远不会结束，例如 随机数的无限序列
	 
	查询表达式：
	序列 sequence 是 Linq的基础。在看到查询表达式的时候，应该想到它所涉及的序列：
		一开始 至少存在一个序列，通常在中间过程转换为其他序列，也可能和更多的序列连在一起。
	序列 是数据处理的流模型的基础。让我们能够只在需要的时候，才对数据进行处理。

	延迟执行和流处理
	var adult=from person in people
		  where person.Age>=18
		  select person.Name;
	表达式 在创建的时候，不会处理任何数据。也不会访问原始的人员列表。
	而是在内存中生成这个查询的表现形成。判断，是否是成人的谓词 
	where person.Age>=18,select person.Name,都是通过委托实现的。
	只有在访问结果IEnumerable<string>的第一个元素的时候，整个车轮才往前滚动。
	Linq的这个特点，成为延迟执行。
	在最终结果的 第一个元素 被访问的时候，select 转换才会为它的第一个元素调用where转换。而where转换
	会访问列表的第一个元素。检查这个谓词是否匹配。并把这个元素返回给select.依次取出返回结果。

	上个 Linq表达式说明：
	1.foreach开始调用
		判断是否到达末尾
				调取Select	
						调取where
									调取List
						返回("Helloy",36);
						检查：Age>=18,yes
				返回("Helloy",36)
				转换("Helloy",36)->"Helloy";
	返回 “Helloy”；
	输出“Helloy”;
		判断是否到达末尾
				调取Select	
						调取where
									调取List
						返回("Hans",15);
						检查:Age>=18,false
									调取List
						返回("Jon",36);
						检查：Age》=18,yes
				返回("Jon",36);
				转换 ("Jon",36)->'Jon'
	返回"Jon";
	输出"Jon";

	本次中，将 MoveNext 和 Current封装到 提取 操作中。实际上每次 调取前，都会检查是否到达末尾。
	立即执行：有些转换 一旦调用就立即发生，而不会延迟执行。
	一般来说，返回一个值的操作 都立即执行。返回一个序列的操作 延迟执行。
	但是 Enumerable.Reverse方法要提取所有的数据。Reverse是一个缓冲操作。
	在效率上有较大影响。如果不能承受把所有数据都读到内存中的开销。就不能使用缓冲操作。

	# 标准查询操作符
	操作符。 标准查询操作符。内置的方法。
	Linq to Object 的推模型和拉模型。

	#定义示例数据模型
	缺陷跟踪 扩展方法 和 Lmabda表达式
	缺陷跟踪 是大部分专业开发人员都熟悉的一个业务领域

	# 选择元素
	编译器 在遇到查询表达式时 使用转换过程的常见特点。然后讨论范围变量。
	var users=from user in SampleData.AllUsers
		  select user;
	foreach(var user in users){
		Console.WriteLine(user);
	}
        编译器 把 查询表达式 转换为 普通的 c#代码。
	这是 支持 c#3 表达式的基础。
	第一个阶段：预处理。
			以机械方式进行转换，不去理解代码，应用类型引用，方法调用有效性等。
	
	 Lambda表达式可以转换为：
		第一：委托实例
		第二：表达式树
	 Linq to Objects  只进行一种调用，大部分时候是委托。

	 查询表达式 
	 编译器转译的工作原理；
		为Select和 Where提供了伪实现。使Select成为普通实例方法，Where成为扩展方法。
