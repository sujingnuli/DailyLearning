11.1 Linq介绍
11.2 简单的开始：选择元素
11.3 对序列进行过滤和排序
11.4 let子句和透明表示符
11.5 连接
11.6 分组和延续
11.7 在查询表达式和点标记之间做出选择

11.1 Linq介绍
	Linq不能把非常复杂的查询转为一行代码
	本次将分析Linq的两个不同的方面
		第一：架构支持
		第二：查询表达式的编译器转换
	查询表达式：首先由编译器  预处理 为 普通的 c#3 代码。
		    然后以完全普通的方式进行编译
	
	# Linq中的基础概念
	c#3 编译器如何处理查询表达式
	降低两种数据模型之间的组抗失配的过程中，遇到的一个问题是：创建另一个模型为桥梁
	
	序列 sequence  -linq模型
        通过IEnumreable和IEnumerable<T> 进行封装。 序列就像数据的传送带，每次只能获取他们一个
	直到你不想获取数据或者序列中没有数据。
	序列与其他集合的数据结构的最大区别是：
		当你从序列中读取数据的时候，通常不知道还有多少数据等待项。也不能访问任意数据项。
	而且，有些序列，永远不会结束，例如 随机数的无限序列
	 
	查询表达式：
	序列 sequence 是 Linq的基础。在看到查询表达式的时候，应该想到它所涉及的序列：
		一开始 至少存在一个序列，通常在中间过程转换为其他序列，也可能和更多的序列连在一起。
	序列 是数据处理的流模型的基础。让我们能够只在需要的时候，才对数据进行处理。

	延迟执行和流处理
	var adult=from person in people
		  where person.Age>=18
		  select person.Name;
	表达式 在创建的时候，不会处理任何数据。也不会访问原始的人员列表。
	而是在内存中生成这个查询的表现形成。判断，是否是成人的谓词 
	where person.Age>=18,select person.Name,都是通过委托实现的。
	只有在访问结果IEnumerable<string>的第一个元素的时候，整个车轮才往前滚动。
	Linq的这个特点，成为延迟执行。
	在最终结果的 第一个元素 被访问的时候，select 转换才会为它的第一个元素调用where转换。而where转换
	会访问列表的第一个元素。检查这个谓词是否匹配。并把这个元素返回给select.依次取出返回结果。

	上个 Linq表达式说明：
	1.foreach开始调用
		判断是否到达末尾
				调取Select	
						调取where
									调取List
						返回("Helloy",36);
						检查：Age>=18,yes
				返回("Helloy",36)
				转换("Helloy",36)->"Helloy";
	返回 “Helloy”；
	输出“Helloy”;
		判断是否到达末尾
				调取Select	
						调取where
									调取List
						返回("Hans",15);
						检查:Age>=18,false
									调取List
						返回("Jon",36);
						检查：Age》=18,yes
				返回("Jon",36);
				转换 ("Jon",36)->'Jon'
	返回"Jon";
	输出"Jon";

	本次中，将 MoveNext 和 Current封装到 提取 操作中。实际上每次 调取前，都会检查是否到达末尾。
	立即执行：有些转换 一旦调用就立即发生，而不会延迟执行。
	一般来说，返回一个值的操作 都立即执行。返回一个序列的操作 延迟执行。
	但是 Enumerable.Reverse方法要提取所有的数据。Reverse是一个缓冲操作。
	在效率上有较大影响。如果不能承受把所有数据都读到内存中的开销。就不能使用缓冲操作。

	# 标准查询操作符
	操作符。 标准查询操作符。内置的方法。
	Linq to Object 的推模型和拉模型。

	#定义示例数据模型
	缺陷跟踪 扩展方法 和 Lmabda表达式
	缺陷跟踪 是大部分专业开发人员都熟悉的一个业务领域

	# 选择元素
	编译器 在遇到查询表达式时 使用转换过程的常见特点。然后讨论范围变量。
	var users=from user in SampleData.AllUsers
		  select user;
	foreach(var user in users){
		Console.WriteLine(user);
	}
        编译器 把 查询表达式 转换为 普通的 c#代码。
	这是 支持 c#3 表达式的基础。
	第一个阶段：预处理。
			以机械方式进行转换，不去理解代码，应用类型引用，方法调用有效性等。
	
	 Lambda表达式可以转换为：
		第一：委托实例
		第二：表达式树
	 Linq to Objects  只进行一种调用，大部分时候是委托。

	 查询表达式 
	 编译器转译的工作原理；
		为Select和 Where提供了伪实现。使Select成为普通实例方法，Where成为扩展方法。

	 # Cast, OfType,和 显示 类型的范围变量
	 对ArrayList,Object[] 数组查询。
	 用Cast,或者 OfType.其中 Cast 是查询表达式语法直接支持的。
	 这两个操作符很相似： 都可以处理非类型化的序列，并返回强类型的序列。
	 Cast 把每个元素都转换为目标元素。
	 而OfType首先进行一个测试，以调过任何具有错误类型的元素。

	 ArrayList list=new ArrayList{"First","Second","third"};
	 IEnumerable strs=list.Cast<string>();
	 foreach(var str in strs){
		Console.WriteLine(str);
	 }
	 list=new ArrayList{1,"I am not an int",2,3};
	 IEnumerable ints=list.OfType<int>();
	 foreach(int item in ints){
		Console.WriteLine(item);
	 }
	 两个转换都是对数据进行流处理。只有在获取数据后，才对其进行转换

	 #
	 在引入显示类型的范围变量后，编译器就调用Cast 来保证查询表达式的剩余部分使用这个类型。
	 ArrayList list=new ArrayList{"First","Second","Third"};
	 var strs=from string str in list
		  select str.Substring(0,3);
	 foreach(string str in strs){
		Console.WriteLine(str);
	 }
	 # 转译后的表达式
	 list.Cast<string>().Select(entry=>entry.Substring(0,3));

	 #Linq
	 以数据序列为基础
	 延迟执行
	 c#3 的查询表达式 包括把一个表达式 转换为普通 c# 代码的 预处理阶段。然后使用类型推断
		重载，Lambda表达式 等对转换后代码编译
	 查询表达式中声明的变量，范围变量。

11.3 对序列进行过滤和排序
	 总是返回和输入类型相同的序列。
	 使用where 子句进行过滤。
	 编译器把 where 表达式语句，转换为 带有 Lambda表达式的 Where方法调用。
	 使用多个 where 子句，会导致多个链接在一起的 where 调用。

	 #测试 	分配给tim 的 开口的 缺陷。

	 var query=from defect in SampleData.AllDefects
		   where defect.Status=Status.Closed
		   where defect.AssignedTo==time
		   select defect.Summary;
	  foreach(var summay in query){
		Console.WriteLine(summary);
	  }
	  # 转译后的代码
	  SampleData.AllUsers.Where(defect=>defect.Status!=Status.Closed).Where(defect.AssingedTo==tim).Select(defect=>defect.Summay);
	  这里，两个where 因为逻辑关联，放在一起，更加合理。

	  # 退化的查询表达式
	  如果 查询表达式中，select 语句什么都不做，只是返回相同的序列。则编译器会删除
	  所有对select的调用。

	  # 退化的查询表达式 
	  var query=from defect in SampleData.AllUsers
			select defect;
	   转译后：
	  var query=SampleData.AllUsers.Select(defect=>defect);

	  #而如果有其他的操作，则删掉Select查询
	  var query=from defect in SampleData.AllUsers
		   where defect.Status!=Status.Closed
		   where defect.AssignedTo==time
		   select defect;
	   转译后：
	   var query=SampleData.AllUsers.Where(defect=>defect.Status!=Status.Closed).Where(defect=>defect.AssingedTo==tim);

	   # 使用 orderby 子句进行排序
	   orderby。要求所有数据都载入。也不能对无限序列进行排序。
	   主排序：Orderby,OrderByDescending
	   子排序；ThenBy, ThenByDescending;

	   # tim 的开口缺陷，按照优先级排序
	   var query=from defact in SampleData.AllUsers
		     where defect.Status!=Status.Closed
		     where defect.AssignedTo=time
		     orderby defect.Severity descending,defect.LastModified
		     select defect;
	    foreach(var defect in query){
		Console.WriteLine("{0}:{1} ({2:d})",defect.Severtiy,defect.Summary,defect.LastModifed)
	    }

	    # 转译后
	     var query=SampleData.AllUser.Where(defect=>defect.Status!=Status.Closed).Where(defect=>defect.AssingedTo==tim).OrderByDescending(defect=>defect.Severity).ThenBy(defect=>defect.LastModified);


11.4 let子句和透明标识符
	let子句 是最 简单的 使用 透明标识符的 转换
	var query= from user in sampleData.AllUsers
		   let length=user.Name.Length
		   orderby length
		   select new{Name=user.Name,Length=length};
	foreach(var user in query){
		Console.WriteLine("{0}:{1}",user.Length,user.Name);
	}

	我们需要两个范围变量，但是lambda表达式 只能给 select传递一个。

	# 转译后的句子 
	var query=SampleData.AllUsers.Select(user=>new{user,user.Name.Length}).OrderBy(z=>z.Length).Select(z=>new{z.user.Name,z.Length});
	let 子句转译：从一个查询表达式 到 另一个 查询表达式 。引入 * 表示 引入的 透明 标识符 
	透明标识符 在转译的最后一步 被清除 。

11.5 连接
	数据库连接： 使用两张数据表，视图，表函数。通过匹配两者之间的数据，来创建结果。
	
	有三种类型连接。
		使用join子句的内连接
		使用join into 子句进行分组连接
		使用from 子句进行交叉连接和合并序列
	内连接： join子句
		涉及到两个序列。一个 键选择器 key selector. 应用于第一个序列
				另一个键选择器key selector ,应用于第二个序列
		      配对规则。第一个元素的键，与第二个元素的键相同。
	
         subscription: 订阅
	 Linq to Object: 左右连接 可以交换顺序  。返回结果条目相同。只是顺序不同。
	 返回条目顺序： 
	 左边序列	第一个元素	所有成对数据
	 左边序列	第二个元素	所有成对数据

	 左边序列	流处理		右边序列	缓冲处理
	 如果一个大序列，一个小序列	把小序列放右边，缓冲处理。

	 这种操作依然是延迟的。
	 访问第一个数据对
				开始执行
						读取右边的整个序列
						建立键到值的映射
				迭代左边的序列
				生成适当的数据对。
	 两种join 操作。
	 var query=from defect in sampleData.AllUsers
		   where defect.Status==Status.Closed
		   join subscription in sampleData.AllSubscriptions
		   on defect.Project equals subscription.Project
		   select new{defect.Summary,subscription.EmailAddress};
	 var query=from subscription in sampleData.AllSubscriptions
		   join defect in (
			from defect in sampleData.AllUsers
			where defect.Status==Status.Closed
			select defect
		   )
		   on subscription.Project equals defect.Project
		   select new{defect.Summary,subscription.EmailAddress};
	 编译器转译后：
		LeftSequence.Join(rightSequence,LeftKeySelector,RightKeySelector,resultSelector);
	 用于Linq to Object的重载签名
	 static IEnumerable<TResult> Join<TOuter,TInner,Tkey,TResult>(
		this IEnumerable<TOuter> outer,
		IEnumerable<TInner> inner,
		Func<TOuter ,TKey> outerSelector,
		Func<TInner,TKey> innerSelector,
		Func<TOuter,TInner,TResult> resultSelector
	 )
	 #使用 Join...into 进行分组 连接
	 分组连接 ：group join .
	 var query=from defect in sampleData.AllUsers
		   join subscription in sampleData.AllSubscriptions
		   on defect.Project equals subscription.Project
		   into groupedSubscriptions
		   select new{Defect=defect,Subscriptions=groupedSubscriptions};
	  foreach(var entry in query){
		Console.WriteLine(entry.Defect.Summary);
		foreach(var subscription in entry.Subscriptions){
			Console.WriteLine("    {0}",subscription.EmailAddress);
		}
	  }
	  分组链接 对右边序列进行缓冲，左边序列进行流处理。
		from defect in sampleData.AllUsers
		Defect:{...}
		Defect:{...}
		Defect:{...}
		join subscription in sampleData.AllSubscriptions
		on defect.Project equals subcription.Project
		into groupedSubscriptions
			from subscription in sampleData.AllSubscriptions;
			NotificationSubscription 序列
			defect=Defect:{...},groupSubscriptions={..}
			defect=Defect {...},groupSubscriptions={...}

		select new {Defect=defect,Subscriptions=groupedSubscriptions}
			  {Defect=Defect{...},Subscriptions={...}}
			  {Defect=Defect{...},Subscriptions={...}}

		查询结果。分组链接。

		# 从新统一一遍：
		Join查询
		var query=from defect in sampleData.AllUsers
			  join subscription in sampleDate.AllSubscription
			  on defect.Project equals subscription.Project
			  select new{defect.Summary,subscription.EmailAddress};
		#Join 的 签名：
			static IEnumerable<TResult> Join<TOuter,TInner,TKey,TResult>(
				this IEnumerable<TOuter> outer,
				IEnumerable<TInner> inner,
				Func<TOuter,TKey> outerSelector,
				Func<TInner,TKey> innerSelector,
				Func<TOuter,TInner,TResult> resultSelector
			)
		# 转译后的表达式
			sampleDate.AllUsers.Join(sampleDate.AllSubscriptions,defect=>defect.Project,subcription=>subcription.Project,(defect,subscription)=>new{defect.Summary,subscription.EmailAddress});

		GroupJoin 查询
		var query=from date in dates
			  join defect in sampleData.AllUsers
			  on date equals defect.Create.Date
			  into joined
			  select new{Date=date,Count=joined.Count}
		#GoupJoin的签名
			static IEnumerable<TResult> GroupJoin<TOuter,TInner,TKey,TResult>(
				this IEnumerable<TOuter> outer,
				IEnumerable<TInner> inner,
				Func<TOuter> outerSelector,
				Func<TInner> innerSelctor,
				Func<TOuter,IEnumerable<TInner>,TResult> resultSelector
			)
		# 转译后的表达式
		var query=dates.GroupJoin(sampleData.AllUsers,date=>date,defect=>defect.Created.Date,(date,joined)=>new{Date=date,Count=joined.Count});

		# 使用多个 from 子句进行交叉连接 和合并连接

		# 交叉链接
		var query=from left in Enumerable.Range(1,4)
			  from right in Enumerable.Range(11,left)
			  select new{Left=left,Right=right};=
	
		#SelectMany的签名
			static IEnumerable<TResult> SelectMany<TResouce,TCollection,TResult>(
				this IEnumerable<TResouce> resource,
				Func<TResouce,IEnumearble<TCollection>> collectionSelector,
				Func<TResouce,TCollection,TResult> resultSelector
			)
		#转译后的表达式
			Enumerable.Range(1,4).SelectMany(left=>Enumerable.Range(11,left),(left,right)=>new{Left=left,Right=right});

		#交叉查询 很实用：实例
		var query=from file in Directory.GetFiles(logDir,"*.log")
			  from line in ReadLines(file)
			  let entry=new LogEntry(line)
			  where entry.Type=EntryType.Error
			  select entry;
		
		分组查询 group by 
		grouping projection by grouping .
		
		grouping 表达式 通过键来决定序列如何分组  ，结果是一个序列。
		序列中，每个元素本身就是一个序列，还有一个Key属性。
		封装在IGrouping<TKey,TElement>中，扩展了IEnumerable<TElement>类型。

		分组无法对结果进行流处理。会对每个元素应用键选择和投影。并缓冲被投影的
		分组序列，尽管不是流式的，但是执行延迟，直到获取结果。
		var query= from defect in sampleData.AllUsers
			   where defect.AssignedTo!=null
			   group defect by defect.AssignedTo
		foreach(var entry in query){
			Console.WriteLine(entry.Key);
			foreach(var defect in entry){
				Console.WriteLine("   ({0})  {1}",defect.Serverity,defect.Summary);
			}
		}

		转译后的lambda表达式
		var query=sampleData.AllUser.Where(defect=>defect.AssignedTo!=null).GroupBy(defect=>defect.AssignedTo);

		var query= from defect in sampleData.AllUsers
			   where defect.AssignedTo!=null
			   group defect.Summary by defect.AssignedTo
		#转译后的lambda表达式
		var query=sampleData.AllUsers.Where(defect=>defect.AssignedTo!=null).GroupBy(defect=>defect.AssingedTo,defect=>defect.Summary);


11.6.2 查询延续
		查询延续：把一个查询表达式的结果 作为另一个查询表达式的 初始序列。
		var query=from defect in sampleData.AllUsers
			   where defect.AssignedTo!=null
			   group defect by defect.AssignedTo into grouped
			   select new{Assigness=grouped.Key,Count=group.Count()} into result
			   orderby result.Count descending
			   select result;
		foreach(var entry in query){
			Console.WriteLine("{0}:{1}",entry.Assinged.Name,entry.Count);
		}

		sampleData.AllUsers.Where(defect=>defect.AssignedTo!=null).GroupBy(defect=>defect.AssignedTo).Select(grouped=>new{Assigned=group.Key,Count=grouped.Count()}).OrderByDescending(result=>result.Count);
11.7 在查询表达式和点标记之间做出选择
		Enumerable.Where 有一个重载  sequence.Where((item,index)=index%2==0)
		Enumerable.Select 有一个重载 sequence.Select((Item,index)=>new{Item,Index}).OrderBy(x=>x.Item.Name);
		将父序列的一个索引作为参数传入委托 
		许多查询操作符 支持自定义比较器。比如排序和连接 。
		 
		# 使用点标记可以会更简单的查询表达式
		var adults=people.Where(person=>person.Age>=18);
		var adults=from person in people 
			   where person.Age>=18
			   select person;
		# 选择查询表达式
		let子句-》查询表达式
		

																											     

		