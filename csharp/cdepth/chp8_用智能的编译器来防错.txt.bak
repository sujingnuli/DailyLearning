c#2 泛型，匿名，委托，迭代器
c#3 Linq
c#语言的改变	库的改变	CLR的改变

8.1 自动实现的属性
8.2 隐式类型的局部变量
8.3 简单的初始化

8.1 自动实现的属性
	普通属性：可读/可写 将值存在一个非常只管的私有变量中，不做任何校验，也没有自定义代码。
	public string Name{get;set;}
	一次性代码，应该使用属性。
8.2 隐式类型的局部变量
	c#1 的类型 是静态的，显示的，安全的。

	#var 
	编译器工作： 获取初始化表达式在编译时的类型，并使变量也具有那种类型。
	变量仍然是静态类型。
	变量是静态类型的，只是类型由编译器推断。

	#隐式类型的限制
	#隐式类型的优缺点
	优点：减少代码量 例如 :Dictionary<string,List<Person>>
	缺点：可读性差
8.3 简单的初始化
	# 定义示例类型
	对象初始化程序 objec initializers.
	初始化列表 ：对象创建好后，如何对其初始化
	public class Person{
		public int Age{get;set;}
		public string Name{get;set;}

		List<Person> friends=new List<Person>();
		public List<Person> Friends{get{return friends;}}

		Location home=new Location();
		public Location Home{get{return home;}}

		public Person(){}
		public Person(string name){
			Name=name;
		}
	}	
	public class Location{
		public string Country{get;set;}
		public string City{get;set;}
	}
	
	无论是Friends,还是Location;都是在Person创建时，以留空的方式创建的
	而不是仅仅保留空引用。并且是只读的。这点很重要。
	#设置简单属性
	Person p=new Person(){Name="Tom",Age=9};
	# 当有无参构造时，() 可以省略

	# 为嵌入对象设置属性
	Person p=new Person{
		Name="Tom",Age=9,
		Home={Country="UK",City="Reading"}
	}





	
