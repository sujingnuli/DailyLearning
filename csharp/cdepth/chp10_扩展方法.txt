10.1 未引入扩展方法之前的状态
10.2 扩展方法的语法
10.3 .net 3.5 中的扩展方法
10.4 使用思路和原则


10.1 未引入扩展方法之前的状态
	c#3 引入了扩展方法的概念。既有静态方法的优点，又使可读性提高
	链接：chaining

	扩展方法 与 c#1 和 c#2 的静态方法相比，是更理想的解决方法。尤其是
	创建工具类的时候
	
	IList<T> 提供了一个 完全通用的排序过程所需的全部构造块。
	IList<T>,设计成一个抽象类，包含排序功能。
	扩展方法。IList<T> 任何排序
	Linq的许多功能都是 围绕接口上的 扩展方法建立起来的。
	System.IO.Stream.
	Stream是.NET的二进制通信的基础。
	Stream是抽象类
		派生类：NetworkStream
			FileStream
			MemoryStream;
	#
	public static class StreamUtil{
		const int BufferSize=8192;
		public static void Copy(Stream input,Stream output){
			byte[] buffer=new byte[BufferSize];
			int read;
			while((read=input.Read(buffer,0,buffer.Length))>0){
				output.Write(buffer,0,read);
			}
		}

		public static byte[] ReadFully(Stream input){
			using(MemoryStream tempStream=new MemoryStream()){
				Copy(input,tempStream);
				return tempStream.toArray();
			}
		}
	}
	#
	WebRequest request=WebRequset.Create("http://mainning.com");
	using(WebRespons response=request.GetResponse())
	using(Stream responseStream=response.GetResponseStream())
	using(FileStream output=File.Create("response.dat")){
		StreamUtil.Copy(responseStream,output);
	}

10.2 扩展方法的语法
	扩展类型：extended type.
	要求：  第一：至少一个参数   不能用ref,out修饰。
		第二：第一个参数用this 标识。
		第三：方法必须是静态方法。

	public static class StreamUtil{
		const int BufferSize=8192;
		public static void CopyTo(this Stream input,Stream output){
			int read;
			byte[] buffer=new byte[BufferSize];
			while((read=input.Read(buffer,0,buffer.Length))){
				output.Write(buffer,0,read);
			}
		}
		public static byte ReadFully(this Stream input){
			using(MemoryStream tempStream=new MemoryStream()){
				Copy(input,tempStream);
				return tempStream.ToArray();
			}
		}
	}
	# 调用扩展方法
	# 在空引用上调用方法
	# 
	c#3 中 扩展方法，可以和扩展类型的一个现有的静态方法具有相同的签名。
	如,string 有一个 静态，无参的 IsNullOrEmpty();
	   你让然可以创建并使用扩展方法
	   public static bool IsNullOrEmpty(this string text){
		return string.IsNullOrEmpty(text);
	   }
10.3 .NET 3.5 中的扩展方法
	 在框架中，扩展方法，就是为Linq服务的。
	 有的linq提供器 包含了 几个 供辅助的扩展方法。
	 Enumerable,Queryable. 都在System.Linq命名空间中。
	 两个类，Enumerable,Queryable.在 System.Linq中。包含大量扩展方法。
	 Enumerable类中，大多扩展的 IEnumerable<T>;
	 Queryable类中，大多扩展的 IQueryable<T>;

	 # 从Enumerable开始起步
	 var collection=Enumerable.Range(0,9).Reverse();
	 foreach(var item in collection){
		Console.WriteLine(item);
	 }
	 # 用Where 过滤 将方法调用链接到一起
	 扩展方法允许静态方法调用链接到一起，这是扩展方法存在的主要原因之一
	 var collection=Enumerable.Range(0,9).Where(x=>x%2!=0).Reverse();

	 #似曾相识的Where方法
	   public static IEnumerable<T> Where<T>(this IEnumerable<T> source,Func<T,bool> predicate){
		if(source==null||predicate==null){
			throw new ArgumentNullException();
		}
		return WhereImpl(source,predicate);
	   }
	   public static IEnumerable<T> Where<T>(IEnumerable<T> source,Func<T,bool> predicate){
		foreach(T item in source){
			if(predicate(item)){
				yield return item;
			}
		}
	   }

	   foreach(string line in ReadLine.ReadLines("../../pragrame.cs").Where(
		line=>line.StartWith("using")
	   )){
		Console.WriteLine(line);
	   }

	  # 用select 方法和匿名类型进行投影
	  Enumerable中最重要的投影方法 就是 select.
	  public static IEnumerable<TResult> Select<TSource,TResult>(this IEnumerable<TResource> souce,Func<TSource,TResult> selector);
	  IEnumerable<TSource>-> IEnumerable<TResult>;
	  Func<TSouce,TResult> 
	  Select 和 List<T> 中的 ConvertAll方法很像。但是可以操作任意枚举的集合
	  采用了延迟执行技术。只有在每个元素被请求时才会真正的执行。
	  var source=Enumerable.Range(0,10).Where(x=>x%2!=0).Reverse().Select(x=>new {num=x,root=Math.Sqrt(x)};);
	  foreach(var item in source ){
		Console.WriteLine("num={0},root={1}",item.num,item.root);
	  }

	  # 用orderby 方法进行排序
	  OrderBy,OrderByDescending,  ThenBy ,ThenByDescending
	  var collection=Enumerable.Range(-5,11).Select(x=>new{org=x,square=x*x}).OrderBy(x=>x.square).ThenBy(x=>x.org);
	  
	  Enumerable.OrderBy().ThenBy(),不改变原有的集合。
	  List<T>.Sort(),Array.Sort();改变原有的集合
	  Linq的操作符 无副作用，不影响输入，不会改变环境。

	  # 涉及链接的实际例子
	  public class Company{
		List<Dept> depts=new List<Depts>();
		public List<Dept> Depts{get{return this.depts;}}
	  }
	  public class Dept{
		public string Name{get;set;}
		List<Employee> employees=new List<Employee>();
		public List<Employee> Employees{get{return this.employees;}}
	  }
	  public class Employee{
		public double salary;
	  }
	  public void test(){
		Company	 company=new Company{
				Depts={
					new Dept{Name="dept1",Employees={
						new Employee{salary=3000},
						new Employee{salary=3000},
						new Employee{salary=2000}
					}},
					new Dept{Name="dept2",Employee={
						new Employee{salary=5000},
						new Employee{salary=4000}
					}}
				}
			};
			company.Depts.Select(dept=>new{dept.Name,Cost=dept.Employees.Sum(emp=>emp.salary)}).OrderBy(dept=>dept.Cost);

	  }

	   
	  # 统计分配给开发者的Bug数量
	  bugs.GroupBy(bug=>bug.AssignedTo).Select{list=>new{Developer=list.key,Count=list.Count()}).OrderByDescending(x=>x.Count);
	  缺陷跟踪： Defect Tracking 
	  public class Bugs{
		List<Bug> bugs=new List<Bug>();
		public List<Bug> Bugz{get{return this.bugs;}}
	  }
	  public class Bug{
		public string Name{get;set;}
		public string Developer{get;set;}
	  }
	  public void test(){
		Bugs bugs=new Bugs{
		     Bugz={
			new Bug{Name="b0",Developer="lily"},
			new Bug{Name="b0",Developer="Hans"},
			new Bug{Name="b0",Developer="Jane"},
			new Bug{Name="b0",Developer="Dans"},
			new Bug{Name="b1",Developer="lily"},
			new Bug{Name="b1",Developer="Hans"},
			new Bug{Name="b1",Developer="Jane"},
			new Bug{Name="b2",Developer="lily"},
			new Bug{Name="b2",Developer="Hans"}
		     }
		};
		var cts=bugs.Bugs.GroupBy(bug=>bug.Developer).Select(
			list=>new{Developer=list.Key,Count=list.Count()}).OrderByDescending(x=>x.Count);
		foreach(var item in cts){
			Console.WriteLine("bug's Developer:{0} ,bug's Count:{1}",item.Developer,item.Count);
		}
	  }
10.4 使用思路和原则
	# 扩展方法，使接口更丰富
	扩展方的一个用途：工具类
		另一个用途：流畅接口
	DSL Domain Specific Language  领域特有语言
