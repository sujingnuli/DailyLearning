可空性： nullity
4.1 没有值时怎么办
4.2 System.Nullable<T> 和System.Nullable
4.3 c#2 为可空类型提供的语法糖
4.4 可空类型的新奇用法

4.1 没有值时怎么办
	Nullable<int>,
	Nullable<T>  是值类型。
	对于Nullable<int> 变量来说。值包含两个，bool,int .而不是其他对	象的引用。
	Nullable<int>,hasValue,value;

	Nullable<T>,有两个构造函数。
		GetValueOrDefault();
		覆盖了：GetHashCode,ToString(),Equals方法。

     --Nullable<T> 装箱和拆箱
	是以一个结构，是一个值类型。
4.2 System.Nullable<T> 和System.Nullable
	--来自非泛型 Nullable类的支持
	System.Nullable<T> 结构。
	System.Nullable是一个静态类。只包含了静态方法。不能创建实例。

	int? nullable=5;
	object boxed=nullable;
	Console.WriteLine(boxed.GetType());

	int normal=(int)normal;
	Console.WriteLine(normal);

	nullable=(int?)boxed;
	Console.WriteLine(nullable);

	nullable=new int?();
	boxed=nullable;
	Console.WriteLine(boxed==null);
	
	normal=(int?)boxed;
	Console.WriteLine(normal);
	
      --使用null进行赋值 和 比较。 
	以后将常用，泛型，空类型，?,和反射，和委托
	c#编译器允许 使用 null在 比较和赋值时 表示一个可空类型的空值
	Nullable<T>,默认构造函数。使用熟悉的null字面量。
	Person类，姓名，出生日期，死亡日期。死亡日期用Null值表示。
	class Person{
		DateTime birth;
		DateTime? death;
		string name;
		public Person(string name,DateTime birth,DateTime? death){
			this.name=name;this.birth=birth;this.death=death;
		}
		public TimeSpan Age(){
			if(death==null){
				return DateTime.Now-birth;
			}else{
				return death.Value-birth;
			}
		}
	}
	Person p1=new Person("Tom",new Date(1983,2,14),new DateTime(1938,3,21));
	Person p2=new Person("Lily",new Date(1990,4,24),null);
     --可空转换和操作符
	可空类型，值，引用。
	可与null进行比较。
	非可空的值类型，支持 操作符 或者一种转换。int.long.  int？  long?
	转换： null   到  T？
		T     到  T？
		T？   到  T
	提升转换： lifted conversion.
	int?	long?	隐式
	int	long?	隐式
	int?	long    显式

	提升操作符。
	对于一元和二元操作符，返回类型为可空类型。如果任何一个操作数为空，返回一个空值。
	对于关系运算符，如果任何一个操作数为空，返回始终为false.
	five+nullInt	int?x,int?y	null
	nullInt==nullInt  int?x int?y	true
	nullInt==five		int? x,int?y false
	five<nullint	int?x int?y	false
     --可空逻辑
	V=I*R ,电压=电流*电阻  电路各个部分的电压
	真值表，NAND门 ,NOR门 的差异
	2个输入门的逻辑门  ，总共有4行。
	x	y	x&y	x|y	x^y
	0	0	0	0	
	0	1	0	1
	0	null	0	null
	1	0	0	1
	1	1	1	1
	1	null	null	1
	null	0	0	null
	null	1	null	1
	null	null	null	null
	三态的逻辑类型  bool?  true/false/null
	一个为空的bool? 代表一种可能。
	可以将输入的每个空项想象成一个变量，加入结果依赖于该变量，结果就为null.
	x	y	x&y	x|y
	1	null	null	1
	0	null	0	null
	null	1	null	1
	null	0	0	null
	null	null	null	null
     --对可空类型 使用as 操作符
	c#2 之前	as 只能用于引用类型
	c#2 之后	as  可用于引用类型和可空类型
	public void PrintValueAsInt32(object o){
		int? nullable=o as int?;
		Console.WriteLine(nullable.HasValue?nullable.Value.ToString():"null");
	}

	PrintValueAsInt32(5);
	PrintValueAsInt32("something");
	避免判断，使CLR执行两次相同类型检查。
    -- 空合并操作符
	first??second
	DataTime birth;
	DateTime death;
	public TimeSpan Age(){
		return death??DataTime.Now-birth;
	}
	# c#1
	Address contact=user.contactAddress;
	if(contact==null){
		contacct=user.ShipppingAddress;
		if(contact==null){
			contact=user.BillingAddress;
		}
	}
	#  c#2
	Address contact=user.contactAdress??user.ShippingAddress??user.BillingAddress;
	
	引用类型： 失败，返回Null，但是如果成功时，null是有效值。
	Hashtable null在 Hashtable中是一个有效值。

	c#1 
	ArrayList list=hash[key];
	if(list!=null){
		list=new ArrayList();
		list[key]=list;
	}
	list.Add(newItem);

	解析一个整数  ，TryParse
	#
	static int? TryParse(string text){
		int ret;
		if(int.TryParse(text,out ret)){
			return ret;
		}else{
			return null;
		}
	}
	int? parsed=TryParse("Notvalid");
	Console.WriteLine(String.Format("{0}",parsed==null?"Not valid":"parsed to "+parsed.Value));

4.4 可空类型的新奇用法
	谁都不愿意写相同的重复代码。重构能摆脱重复。
	但是重构会遇到阻力。
	例如 ，Equals,和 Compare


