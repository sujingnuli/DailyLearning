c#4 只有一个大特性，动态类型。

13.1 可选参数和实名参数
13.3 接口和委托的泛型可变性

13.1 可选参数和实名参数
	可选参数：optional parameter
	实名参数:named argument

	# 可选参数：
		一些参数是可选的，调用者不必显示的指定它们的值。对于任何参数，都将给定一个默认值。


         可选参数可以显著的降低重载的数量。
	 void Dump(int x,int y=20.int z=30);
	 指定了默认值的是可选参数。
	# 可选参数的约束
	# 命名参数
	    new StreamWriter(path:filename,append:true,encoding:readEncoding);
	    void sayHello(name:"Lily",Age:"25");
	    缺点：
	    int i=0;
	    Dump(x:++i,y:++i,z:++i);
	    i=0;
	    Dump(z:++i,x:++i,y:++i);
	    所以一般情况下不要交换实参的位置
	# 实参求值顺序
	   
	# 不易变性和对象初始化
	 不易变性：immutability.
	 不易变类型是函数式编程的核心部分。

	 #各自的优缺点
	 a.
	 Message message=new Message{
		From="Skeet.com",
		To="Alice.com",
		Body="Hope you have a happy day",
		Subject="A quick Message"
	 }
	 缺点：没有强制要求必备哪些数据
	 Message message=new Message("skeet@.com","Alice.com","Hope you happpy"){
		Subject="A quick Message";
	 }
	 缺点：不能用于不易变类型。 编译器先初始化对象，再调用setter属性。

	 但是可以用可选参数和命名参数，具备两种特征。
	 public Message(string from ,string to ,string body,string subject=null,byte[] attachment=null)	{
		...
	 }
	 Message message=new Message(from:"Hel@.com",To:"Linda",Body:"lI",subject:"A quick message");

	 #重载决策

	 # 可选参数和命名实参的复仇
	  不过 SaveAs的 16个参数，还剩下两个。根据本地变量的名称，很容易区分哪个参数的具体含义
	  Application app=new Application{Visible=true};
	  app.Documents.Add();
	  Document doc=app.ActiveDocument();
	  Paragraph para=doc.Paragraphs.Add();
	  para.Range.Text="Thank goodness for c# 4";

	  object fileName="demo.doc";
	  object format=WdSaveFormat.wdFormatDocument97;
	  doc.SaveAs(FileName:ref fileName,FileFormat:ref format);
	  doc.close();
	  app.Application.Quit();

	  #按值传递ref参数
	  c# 对ref 参数的要求。
	  # 调用命名索引器
	  命名索引器　named indexer
	  office 的com组件 广泛的使用了 命名索引器 named indexer
	  c#4 允许我们使用命名索引器，但是不允许在类型中，声明他们

	  SynonymInfo SysmInfo[string word,ref object Languaged=Type.Missing];

	  Application app=new Application{Visible=true};
	  object missing=Type.Missing;
	  ShowInfo(app.get_SynonymInfo("painful",ref missing));
	  ShowInfo(app.SynonymInfo["nice",WdLanguagedID.wdEnglishUS]);
	  ShowInfo(app.SynonymInfo["features"]);
	  app.Application.Quit();

	  #链接主互操作程序集
		  namespace Microsoft.Office.Interop.Word{
		[ComImport,TypeIdentifier,CompilerGenerated,Guid("..")]
		public interface _Application
		[ComImport,TypeIdentifier,CompilerGenerated,Guid("...")]
		public interface _Documenmt;
		[ComImport,TypeIdentifier,CompilerGenerated,Guid("...")]
		public interface Document:_Document
		[ComImport,TypeIdentifier,CompilerGenrated,Guid("...")]
		public interface Documents:IEnumerable
		[CompilerGenerated,TypeIdentitfier("...","WdSaveFormat")]
		public enum WdSaveFormat
		}
		查看_Application接口 
		[ComImport,TypeIdentifier,CompilerGenerated,Guid("...")]
		public interface _Application{
			void _VtbGap 1_4();
			Document Documents{{...}get;}
			void _VtbGap2_1);
			Document ActiveDocuments{[...]get;}
		}
							
	       类型库，内嵌到程序集
	       优点：
	       易于部署：不必依赖于已存在的版本，或者自行发布PIA.
13.3 接口和委托的 泛型可变性

	
	

	


	
	