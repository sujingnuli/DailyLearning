c#4 只有一个大特性，动态类型。
13.1 可选参数和实名参数
	可选参数：optional parameter
	实名参数:named argument

	# 可选参数：
		一些参数是可选的，调用者不必显示的指定它们的值。对于任何参数，都将给定一个默认值。


         可选参数可以显著的降低重载的数量。
	 void Dump(int x,int y=20.int z=30);
	 指定了默认值的是可选参数。
	# 可选参数的约束
	# 命名参数
	    new StreamWriter(path:filename,append:true,encoding:readEncoding);
	    void sayHello(name:"Lily",Age:"25");
	    缺点：
	    int i=0;
	    Dump(x:++i,y:++i,z:++i);
	    i=0;
	    Dump(z:++i,x:++i,y:++i);
	    所以一般情况下不要交换实参的位置
	# 实参求值顺序
	   
	# 不易变性和对象初始化
	 不易变性：immutability.
	 不易变类型是函数式编程的核心部分。

	 #各自的优缺点
	 a.
	 Message message=new Message{
		From="Skeet.com",
		To="Alice.com",
		Body="Hope you have a happy day",
		Subject="A quick Message"
	 }
	 缺点：没有强制要求必备哪些数据
	 Message message=new Message("skeet@.com","Alice.com","Hope you happpy"){
		Subject="A quick Message";
	 }
	 缺点：不能用于不易变类型。 编译器先初始化对象，再调用setter属性。

	 但是可以用可选参数和命名参数，具备两种特征。
	 public Message(string from ,string to ,string body,string subject=null,byte[] attachment=null)	{
		...
	 }
	 Message message=new Message(from:"Hel@.com",To:"Linda",Body:"lI",subject:"A quick message");

	 #重载决策

	