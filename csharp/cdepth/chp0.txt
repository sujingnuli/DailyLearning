委托类型
	Func<int,int,string>		public delegate TResult Func<TResult>();
	IComparer<T>
	Action<T>  .net2.0		public delegate void Action<T>(T obj);	--字符串反转，求平均值。List<T>.ForEach(Action<T> t);就用到该委托
	Predicate<T>  .net 2.0 		public delegate bool Predicate<T>(T obj); --判断奇偶等，返回集合，求低于年龄值，List<T>.FindAll(Predicate<T> p);
	Comparison<T> .net 2.0		IComparer<T> 委托版，对集合排序。
	ThreadStart			public delegate void ThreadStart();
	ParameterizedThreadStart 	public delegate void ParameterizedThreadStart(object o);
	Converter<TInput,TOutput>	public delegate TOutput Converter<TInput>(T Tinput);
委托应用： 
	List<T>.FindAll(Predicate<T> predicate);
	List<T>.ForEach(Action<T> action);
	List<T>.Sort(Comparison<T> comparison);
	List<T>.ConvertAll(Func<T t,TResult t> func);


	List<T>.ForEach(delegate(string x){...});
	List<T>.ForEach(delegate(string x){...;return x});converter<>
	List<T>.ConvertAll(delegate(Person p){ return new {p.Name,IsAdult=(p.Age>18)};});
	List<T>.FindAll(delegate(Person p){ return p.Age>18});

	#扩展方法  排序 OrderBy,投影 Select,过滤 Where,分组 GroupBy
	Enumerable.Reverse();
	Enumerable.Select();
	Enumerable.Where();
	Enumerable.OrderBy();	Enumerable.OrderBy,不改变原来的集合。List<T>.Sort(),Array.Sort()改变原来的集合。
	Enumerable.ThenBy();
	Enumerable.Sum();
	Enumerable.GroupBy();
	#
	
	#List自带方法
	List.ForEach();
	List.FindAll();
	List.ConvertAll();
	List.Sort();
	List.Reverse();
	#

	有输入参数，有返回餐宿
	TResult Func<T1,TResult>(T1 arg1);
	有输入参数，无输出参数
	void Action<T1,T2,T3>(T1 arg1,T2 arg2,T3 arg3);

接口：
public interface IEnumerable<T>(out T); T 是协变的
public interface IComparer<T>(in T); T 是逆变的

扩展方法： 
	Enumerable.Where();
		public static IEnumerable<T> Where<T>(this IEnumerable<T> source,Func<T,bool> predicate);
	Enumerable.Select();
		public static IEnumerable<TResult> Select<TSouce,TResult>(this IEnumerable<TSource> souce,Func<TSource,TResult> selector);
		Enumerable.Range(0,10).Where(x=>x%2!=0).Reverse().Select(x=>{return new{num=x,root=Math.Sqrt(x)};});

	

值类型：
	Nullable<T>  结构	值类型
引用类型： 数组
	

泛型： 
List<T>;
IComparer<T>;
Nullable<T>;


提升操作符。
	对于一元和二元操作符，返回类型为可空类型。如果任何一个操作数为空，返回一个空值。
	对于关系运算符，如果任何一个操作数为空，返回始终为false.

--bool?
	x	y	x&y	x|y
	1	null	null	1
	0	null	0	null
	null	1	null	1
	null	0	0	null
	null	null	null	null	

#  线程
构造函数
public Thread(ThreadStart start);
pubiic Thread(ParameterizedThreadStart start);
public Thread(ThreadStart start,int maxStackSize);
public Thread(ParameterizedThreadStart start,int maxStackSize);
委托
public delegate void ThreadStart();
public delegate void ParameterizedThreadStart(object o);

第11章 14.4.5 ，和14.5 没有看。

