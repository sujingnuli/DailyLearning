用泛型实现参数化类

3.1 为什么需要泛型
3.2 日常使用的简单泛型
3.3 深化与提高
3.4 高级泛型
      -- 静态字段和静态构造函数
      -- JIT编译器 如何处理泛型
      -- 泛型迭代
      -- 反射和泛型
3.5 讨论c#和其他语言中的限制
	--泛型可变性的缺乏
	--缺乏操作符约束或者数值约束
	--缺乏泛型属性，索引器 和其他成员类型
	--同C++模板的对比
	--和Java泛型的对比
	--

泛型-c#2最重要的新特性，将大量安全检查从执行时转移到了编译时进行。
    -在API中进行反射调用时泛型是如何工作的。
    -CLR处理泛型的一些细节，泛型常见的一些限制，及可以解决的方法。
3.1 为什么需要泛型
	无论是速度还是内存消耗，有泛型和没泛型差别很大。
	泛型的优点：更好的在编译时进行检查。
3.2 日常使用的简单泛型
	.net2.0 Dictionary<TKey,TValue>;
	--泛型字典
		使用Dictionary<TKey,TValue>来统计单词在一段文本中出现的频率
	static Dictionary<string,int> CountWords(string text){
		Dictionary<string,int> frequencies;
		frequencies=new Dictionary<string,int>();
		string[] words=Regex.Split(text,@"\W+");
		foreach(string word in words){
			if(frequencies.ContainsKey(word)){
				frequencies[word]++;
			}else{
				frequencies[word]=1;
			}
		}
		return frequencies;
	}
	string text=@"Do you like green eggs and ham?
			I do not like them ,Sam-I-am.
			I do not like green eggs and ham."；
	Dictionary<string,int> frequencies=CountWords(text);
	foreach(KeyValuePair<string,int> entry in frequencies){
		string word=entry.Key;
		int frequency=entry.Value;
		Console.WriteLine("{0}:{1}",word,frequency);
	}
	用正则表达式将文本分解成单词。
	string[] words=Regex.Split(text,@"\W+");
	这是一种粗糙的处理方式，会得到两个空字符串，没有管Do和do分开计数。
	--泛型类型和泛型参数
	泛型有两种：泛型类型(类，接口，委托，结构)和泛型方法
	类型实参：type argument
	未绑定泛型类型：unbound generic type.
	已构造类型：constructed type.
	开放类型： open type	封闭类型：closed type
	已构造类型，可以是开放的或者封闭的。	
	List<TOutput> ConvertAll<TOutput>(Converter<T,TOutput> conv);
	
	--将一个整数列表 转换成 浮点数列表 ，第二个列表的每个元素都是第一个
	列表中对应元素的平方根。
	
	--委托 /泛型
	static double TaskSquareRoot(int x){
		return Math.sqrt(x);
	}
	List<int> integers=new List<int>();
	integers.Add(1);
	integers.Add(2);
	integers.Add(3);
	integers.Add(4);
	Converter<int,double> converter=TaskSquareRoot;
	List<double> doubles;
	doubles=integers.ConvertAll<double>(converter);
	foreach(double d in doubles){
		Console.WriteLine(d);
	}
	
	converter的赋值 使用了委托的一个特性。
	static double TaskSquareRoot(int x){
		return Math.Sqrt(x);
	}
	Converter<int,double> converter=TaskSquareRoot;
	List<double> doubles;
	doubles=integer.ConvertAll<double>(converter);
	匿名方法也可以提供帮助，可以采用内联的方式来指定转换。
	linq和lambda大量的使用了这种转换。
	非泛型类型也可以拥有泛型方法。
	--开放/封闭/未绑定/已构造    泛型
3.3 深化与提高
	类型约束 type constraint 进一步控制指定哪一个类型实参。
	类型推断 type inference 
	约束 constraint 
      --类型约束
	我们要制定规则，从而判断，哪些是泛型类型或泛型方法能接收的有效类型实参。
	有4种约束类型：
		引用类型约束
		值类型约束
		构造函数类型约束
		转换类型约束
	--引用类型约束
	 struct RefSample<T> where T:class
	 
	 确保使用的类型实参是引用类型，
	 有效的封闭类型： RefSample<IDisposable>,RefSample<string>,RefSample<int[]>
	 无效的封闭类型： RefSample<Guid>,RefSample<int>
	--值类型约束
	  class ValSample<T> where T:struct;

	  T:struct,确保使用的类型实参是值类型，包括枚举(enums).
	  有效封闭类型： ValSample<int>,ValSample<FileMode>.
	  无效的封闭类型： ValSample<object>,ValSample<StringBuilder>
	  System.Enum,System.ValueType.本身是引用类型。
	  类型参数被约束为值类型后，不能进行 == 和 !=比较
	--构造函数类型约束
	  public T CreateInstance<T>() where T:new(){
		return new T();
	  }

	  构造函数类型约束：T :new() 必须是所有约束的最后一个约束。
	  它检查是否有一个无参的构造函数。
	  有效： CreateInstance<int>();CreateInstance<object>();
	  无效： CreateInstance<string>();string没有无参的构造函数。
	  在使用 工厂设计模式  时，构造函数的约束很有用。
	--转换类型约束
	  class Sample<T> where T:Stream;
	  struct Sample<T> where T:IDisposable;
	  class Sample<T> where T:IComparable<T>;
	  class Sample<T> where T:U 


	  可以指定多个接口，只能有一个类
	  class Sample<T> where T:Stream,ArrayList,IComparable<int>;
	--组合约束
	   class Sample<T> where T:class,IDisposable,new();
	   class Sample<T> where T:struct,IDisposable;
	   class Sample<T,U> where T:class where U:struct,T
	   class Sample<T,U> where T:Stream where U:IDisposable'

	   每一个值类型，都有一个无参构造函数。
	   c#中IDisposable接口 的主要用途是释放非托管资源。当不在使用托管对象时，
	   垃圾回收器会自动释放分配给该对象的内存。但是无法预测垃圾回收的时间。

		
   --泛型方法类型实参的类型推断
	 static List<T> MakeList<T>(T first,T second);
	 List<string> list=MakeList<string>("Line 1","Line 2");
	
	IComparable<T>,IEquatable<T>;
	如果一个类型参数被约束为值类型，则完全不能为它使用==和 !=
	
	static bool AreReferencesEquals<T>(T first,T second) where T:class{
		return first==second;
	}

	string name="json";
	string intro1="My name is"+name;
	string intro2="My name is"+name;
	Console.WriteLine(intro1==intro2);
	Console.WriteLine(AreReferencesEquals<string>(intro1,intro2));
	
	结果： True，false。 因为泛型时，按照Object类型对比。
	编译器会在编译未绑定的泛型类型时 就解析好方法重载而不是等到执行时，
	调用重新考虑是否存在更好的重载。

    -- 使用泛型及约束实例
	sealed 修饰 类，方法，属性，密封类，不能被继承。
	using System;
	using System.Collections.Generic;
	public class Pair<T1,T2>:IEquatable<T1,T2>{
		private static readonly IEqualityComparer<T1> firstComparer=EqualityComparer<T1>.Default;
		private static readonly IEqualityComparer<T2> secondComparer=EqualityComparer<T2>.Default;
		private readonly T1 first;
		private readonly T2 second;
		public Pair(T1 first,T2 second){
			this.first=first;
			this.second=second;
		}
		public T1 First{get{return this.first;}}
		public T2 Second{get{return this.second;}}
		public bool Equals(Pair<T1,T2> other){
			return other!=null&&firstCompare.Equals(this.First,other.First)&&secondCompare.Equals(this.Second,other.Second);
		}
		public override bool Equals(object o){
			return this.Equals(o as Pair<T1,T2>);
		}
		public override int GetHashCode(){
			return firstCompare.GetHashCode(first)*37+secondCompare.GetHashCode(second);
		}
	}
	泛型约束： where T :class;where T:struct; where T:IDisposable;where T:new();
	Pair类
	Pair<int,string> pair=new Pair<int,string>(10,"value");
	public static class Pair{
		public static Pair<T1,T2> of<T1,T2>(T1 first,T2 second){
			return new Pair<T1,T2>(first,second);
		}
	}
	包含泛型方法的非泛型类。
	Piar<int,string> pair=Pair.of(10,"vallue");
3.4 高级泛型
	CLR 和框架。泛型类型的静态成员，类型初始化。
	在c#2中，使用foreach来枚举 一个泛型集合时发生的事情。
	泛型对 .net framework中反射的影响。

     --静态字段和静态构造函数
	每个封闭类型都有自己的静态字段集。
	静态初始化程序： static initializer;
	静态构造函数：   static constructor;
	class TypeWithField<T>{
		public static string field;
		public static void PrintField(){
			Console.WriteLine(field+":"+typeof(T).Name);
		}
	}
	TypeWithField<int>.field="first";
	TypeWithField<string>.field="second";
	TypeWithField<DateTime>.field="Third";
	TypeWithField<int>.PrintField();
	TypeWithField<string>.PrintField();
	TypeWithField<DateTime>.PrintField();
	Third:int;
	Third:string
	Third:DateTime;
	一个泛型类型，可能嵌套在另一个泛型类型中。
	public class Outer<T>{
		public class Inner<U,V>{
			static Inner(){
				Console.WriteLine("Outer<{0}>.Inner<{1},{2}>",typeof(T).Name,
					typeof(U).Name,typeof(V).Name);
			}
			public static void DummyMethod();
		}

	}
	Outer<int>.Inner<string,object>.DummyMethod();//

      --JIT编译器如何处理泛型
	所有不同的封闭类型。JIT职责：将泛型的IL转换成本地代码。
	内存和CPU时间。	
	1.只有一个类型参数的情况。
	List<T> 
	JIT为每个以值类型作为 类型参数的 封闭类型都创建不同的代码。
	所有 使用引用类型的 封闭类型都共享相同的本地代码。
	只所以这么做，是因为 所有引用 都有相同大小，32位CLR是4字节，64位CLR是8字节。
	无论使用类型是什么，都可以使用相同的寄存器优化措施。
      -- 泛型迭代
	c#1 中，使用foreach，必须实现 System.Collections.IEumerable接口
				或有一个GetEnumerator()方法。
			      返回类型有一个MoveNext()方法和Current属性	
	c#2,扩展了System.Collections.Generic.IEnumerable<T>,IEnumerator<T>;
	--打印0-9
	class CountingEnumerable:IEnumerable<int>{
		public IEnumerator<int> GetEnumerator(){
			return new CountingEnumerator();
		}
		IEnumerator IEnumerable.GetEnumerator(){
			return GetEnumerator();
		}
	}
	classs CountingEnumerator:IEnumerator<int>{
		int current=-1;
		public bool MoveNext(){
			current++;
			return current<10;
		}
		public int Current{get{return this.current;}}
		object IEnumerator.Current{get{return Current;}}
		public void Reset(){
			current=-1;
		}
		public void Dispose(){}
	}

	CountingEnumerable counter=new CountingEnumerable();
	foreach(int x in counter){
		Console.WriteLine(x);
	}
     --反射和泛型
	内容：introspection;
	typeof通过两种方式作用于泛型类型： 
		获取泛型类型定义。unbounding
		获取特定已构造类型.created

	System.Type
	GetGenericTypeDefination和MakeGenericType.
	这两个方法所执行的是相反的。
	GetGenericTypeDefination;作用于已构造类型
	MakeGenericType.作用于泛型类型定义，返回已构造类型。
	Type.GetType(string),Assembly.GetType(string)==typeof(string)
    --反射泛型方法
	通过反射来调用泛型方法。
	public void PrintPrameters<T>{
		Console.WriteLine(typeof(T));
	}
	Type type=typeof(Snippet);
	MethodInfo definition=type.GetMethod("PrintParameters");
	MethodInfo constructed=definition.MakeGenericMethod(typeof(string));
	constructed.invoke(null,null);
	
	从泛型类型定义 获取的方法，不能直接调用。必须从一个已构造的类型获取方法。
	
	MethodInfo 也增加了一些方法和属性。MakeGenericMethod();MakeGenericType();
	IsGenericMethod;
	利用反射来访问泛型类和方法。
3.5 泛型在c#和其他语言中的限制
	表现力 expressiveness;
