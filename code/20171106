public interface IAuthCookie{
	int UserExpiresHours{get;set;}
	string UserName{get;set;}
	int UserId{get;set;}
	Guid UserToken{get;set;}
	string VerifyCode{get;set;}
	bool IsNeedVerifyCode{get;set;}
	int LoginErrorTimes{get;set;}
}
public class CookieContext:IAuthCookie{
	public CookieContext(){

	}
	public internal string KeyPrefix{
		get{
			return "Context_";
		}
	}

	public int userExpiresHours=10;
	public int UserExpiresHours{
		get{
			return userExpiresHours;
		}
		set{
			userExpiresHours=value;
		}
	}
	public string UserName{
		get{
			return HttpUtility.UrlDecode(Cookie.GetValue(KeyPrefix+"UserName"));
		}
		set{
			Cookie.Save(KeyPreifx+"UserName",HttpUtility.UrlDecode(value),UserExpiresHours);
		}
	}

	public int UserId{
		get{
			return Cookie.Get(KeyPrefix+"UserId").ToInt();
		}
		set{
			Cookie.Save(KeyPrefix+"UserId",value.ToString(),userExpiresHours);
		}
	}

	public Guid UserToken{
		get{
			return Cookie.Get(KeyPrefix+"UserToken").ToGuid();
		}
		set{
			Cookie.Save(KeyPrefix+"UserToken",value.ToString(),userExpiresHours);
		}
	}
	public string VerifyCode{
		get{
			var verifyCode=Encrypt.Decode(Cookie.Get(KeyPrefix+"VerifyCode"));
			Cookie.Save(KeyPrefix+"VerifyCode",Encrypt.Encode(DateTime.Now.Ticks.ToString()),1);
			return verifyCode();
		}
		set{
			Cookie.Save(KeyPrefix+"VerifyCode",Encrypt.Encode(value));
		}
	}
	public int LoginErrorTimes{
		get{
			return Cookie.GetValue(KeyPrefix+"LoginErrorTimes").ToInt();
		}
		set{
			Cookie.SetValue(KeyPrefix+"LoginErrorTimes",value.ToString(),1);
		}
	}
	public IsNeedVerifyCode{
		get{
			return LoginErrorTimes>1;
		}
	}
}
public class Cookie{
	public static HttpCookie Get(string name){
		return HttpContext.Current.Request.Cookies[name];
	}
	public static string GetValue(string name){
		var httpCookie=Get(name);
		if(httpCookie!=null){
			return httpCookie.Value;
		}else
			return string.Empty;
	}
	public static void Remove(string name){
			Cookie.Remove(Get(name));
	}
	public static void Remove(HttpCookie cookie){
		if(cookie!=null){
			cookie.Expires=DateTime.Now;
			Cookie.Save(cookie);
		}
	}
	public static void Save(string name,string value,int expiresHours=0){
		var httpCookie=Get(name);
		if(httpCookie==null){
			httpCookie=Set(name);
		}
	}
	public static void Save(HttpCookie cookie,int ExpiresHours=0){
		string domain=Fetch.ServerDomain;
		string urlHost=HttpContext.Current.Request.Url.Host.ToLower();
		if(domain!=urlHost){
			cookie.Domain=domain;
		}
		if(ExpiresHours!=null){
			cookie.Expires=ExpiresHours;
		}
	}
	public static HttpCookie Set(string name){
		rturn new HttpCookie(name);
	}
}


